/* Copyright 2017 Richard Sahlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Vertex shader that transforms the vertex using matrix, then applies second transform using translate,rotate and scale
 * from attributes
 * @author Richard Sahlin
 */
#version 100

//Put array declaration after name for GLSL compatibility
uniform mat4 uMVMatrix;
uniform mat4 uProjectionMatrix;
uniform vec2 uScreenSize; //Width and height of screen

attribute vec3 aVertex; //vertex position
attribute vec3 aTranslate; //sprite x, sprite y, sprite z
attribute vec3 aRotate;
attribute vec3 aScale;

varying vec2 vTexCoord;

/**
 * From commonvertex.essl
 */
mat3 calculateTransformMatrix(vec3 rotate, vec3 scale);

void main() {
    vec4 pos = uMVMatrix * (vec4(aTranslate.x, aTranslate.y, aTranslate.z, 1.0) + vec4(calculateTransformMatrix(aRotate, aScale) * aVertex, 0.0));
    gl_Position = uProjectionMatrix * pos;
    vTexCoord = aVertex.st;
}
