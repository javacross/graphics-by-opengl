/**
 * Returns a matrix with z axis rotation set from attribute aRotate.z, x and y axis scale.
 * @return Matrix with z axis rotation set from aRotate.z, scale from aScale.x + aScale.y
 */

mat3 calculateTransformMatrix(vec3 rotate, vec3 scale){
    
    mat3 modelview = mat3(1);
    //Rotate z axis
    float cx = cos(rotate.x);
    float sx = sin(rotate.x);
    float cy = cos(rotate.y);
    float sy = sin(rotate.y);
    float cz = cos(rotate.z);
    float sz = sin(rotate.z);
    
    modelview[0][0] = cz * cy * scale.x;
    modelview[0][1] =  -sz * scale.x;
    modelview[0][2] =  sy * scale.x;

    modelview[1][0] = sz * scale.y;
    modelview[1][1] = cz * cx * scale.y;
    modelview[1][2] = -sx * scale.y;

    modelview[2][0] = -sy * scale.z;
    modelview[2][1] = sx * scale.z;
    modelview[2][2] = cx * cy * scale.z;
    
    return modelview;
}