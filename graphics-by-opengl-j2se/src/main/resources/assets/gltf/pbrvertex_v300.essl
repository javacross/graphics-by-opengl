#version 300 es
/**
 * Functions for gltf PBR model
 */
precision highp float;

uniform vec4 uProperties[1];
uniform mat4 uModelMatrix[3];
// color + intensity [4]
// position [3]
uniform vec4 _LIGHT_0[3];

in vec3 POSITION;
in vec3 NORMAL;
in vec4 TANGENT;
in vec3 BITANGENT;
in vec2 TEXCOORD_0;
in vec2 _TEXCOORDNORMAL;
in vec2 _TEXCOORDMR;

out vec4 vDiffuseColor;
out vec2 vTexCoord0;
out vec2 vTexNormal;
out vec2 vTexMR;
out vec3 vNormal;
out mat3 mTangentLight;
out vec4 vWorldPos;


/**
 * Calculate gl_Position and return the pos, set light, eye and tex coordinates.
 */
vec4 posLightTex() {
    vWorldPos = vec4(POSITION, 1.0) * uModelMatrix[0];
    gl_Position = vWorldPos * uModelMatrix[1] * uModelMatrix[2];
    vTexCoord0 = TEXCOORD_0;
    vTexMR = _TEXCOORDMR;
    return vWorldPos;
}

/**
 * Calculates the position and light for pbr materials
 */
void positionLight() {
    vNormal = normalize(NORMAL * mat3(uModelMatrix[0]));
    posLightTex();
}

/**
 * Calculates the position and light, using texture normal map, for pbr materials with texture
 */
void positionLightTexNormal() {
    vec3 tangent = normalize(vec3(TANGENT) * mat3(uModelMatrix[0]));
    vec3 bitangent = normalize(vec3(BITANGENT) * mat3(uModelMatrix[0]));
    vec3 normal = normalize(vec3(NORMAL) * mat3(uModelMatrix[0]));
    mTangentLight = transpose(mat3(tangent,bitangent,normal));
    posLightTex();
    vTexNormal = _TEXCOORDNORMAL;
}

