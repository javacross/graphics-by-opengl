#version 300 es
/**
 * Functions for gltf PBR model
 */
precision highp float;

uniform vec4 uProperties[1];
uniform mat4 uModelMatrix[3];
uniform vec3 _LIGHT_0[1];

in vec3 POSITION;
in vec3 NORMAL;
in vec3 TANGENT;
in vec3 BITANGENT;
in vec2 TEXCOORD_0;
in vec2 _TEXCOORDNORMAL;
in vec2 _TEXCOORDMR;

out vec4 vDiffuseColor;
out vec2 vTexCoord0;
out vec2 vTexNormal;
out vec2 vTexMR;
out vec3 vNormal;
out vec3 vEye;
out vec3 vLight;
out mat3 mTangentLight;


/**
 * Calculates the position and light for pbr materials
 */
void positionLight() {
    vNormal = normalize(NORMAL * mat3(uModelMatrix[0]));
    vec4 pos = vec4(POSITION, 1.0) * uModelMatrix[0] * uModelMatrix[1];
    gl_Position = pos * uModelMatrix[2];
    vLight = normalize(_LIGHT_0[0] - vec3(pos));
    vEye = normalize(-vec3(pos));
    vTexCoord0 = TEXCOORD_0;
    vTexMR = _TEXCOORDMR;
}

/**
 * Calculates the position and light, using texture normal map, for pbr materials with texture
 */
void positionLightTexNormal() {
    mTangentLight = transpose(mat3(TANGENT,BITANGENT,NORMAL)) * mat3(uModelMatrix[0]);
    vec4 pos = vec4(POSITION, 1.0) * uModelMatrix[0] * uModelMatrix[1];
    gl_Position = pos * uModelMatrix[2];
    vLight = normalize(_LIGHT_0[0] - vec3(pos));
    vEye = normalize(-vec3(pos));
    vTexCoord0 = TEXCOORD_0;
    vTexNormal = _TEXCOORDNORMAL;
    vTexMR = _TEXCOORDMR;
}

