#version 300 es
/**
 * Functions for gltf PBR model
 */

uniform mat4 uModelMatrix[3];
uniform vec3 _LIGHT_0[1];

in vec3 POSITION;
in vec3 NORMAL;
in vec3 TANGENT;
in vec3 BITANGENT;
in vec2 TEXCOORD_0;

out vec4 vDiffuseColor;
out vec2 vTexCoord0;
out vec3 vNormal;
out vec3 vEye;
out vec3 vLight;
out vec3 vLightOut;
out vec3 vU;


void positionLight() {
    mat3 tangentLight = mat3(TANGENT,BITANGENT,NORMAL);
    vec4 pos = vec4(POSITION, 1.0) * uModelMatrix[0] * uModelMatrix[1];
    gl_Position = pos * uModelMatrix[2];
    vNormal = normalize(vec3(0.0,0.0,1.0) * mat3(uModelMatrix[0])) * tangentLight;
//    vNormal = NORMAL;
    vLight = normalize(_LIGHT_0[0] - vec3(pos));
    vEye = normalize(-vec3(pos));
    vLightOut = reflect(vLight, vNormal);
    vU = normalize((vLightOut + vLight) * 0.5);
}

